# -*- coding: utf-8 -*-
"""DecisionTreeRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zisOYmtZVWUcSB7qfAYgV_Tz7wzi3YSE
"""

import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeRegressor
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import sklearn.metrics as sm

data = pd.read_csv("APY.csv")
data = data[data['Production'].notna()]
print(data.head())



my_columns = data.select_dtypes(['object']).columns
data[my_columns] = data[my_columns].apply(lambda x: pd.factorize(x)[0])


data.dropna()
x = data.iloc[:, :-2]
# x['Yield'] = data['Yield']
y = data['Production']


X_train, X_test, Y_train, Y_test = train_test_split(x,y, test_size = 0.2)

DTR = DecisionTreeRegressor()
DTR.fit(X_train, Y_train)

Y_pred = DTR.predict(X_test)

my_accuracy = sm.r2_score(Y_test, Y_pred)


print("Calculated Measures of Single Decission Tree")
print()
print("Mean absolute error =", round(sm.mean_absolute_error(Y_test, Y_pred), 2)) 
print("Mean squared error =", round(sm.mean_squared_error(Y_test, Y_pred), 2)) 
print("Median absolute error =", round(sm.median_absolute_error(Y_test, Y_pred), 2)) 
print("Explain variance score =", round(sm.explained_variance_score(Y_test, Y_pred), 2))
print()
print("Accuracy: ", my_accuracy)


from sklearn.ensemble import BaggingRegressor
bagging_model = BaggingRegressor(estimator=DecisionTreeRegressor(), n_estimators=10, random_state=42)
bagging_model.fit(X_train, Y_train)
Y_pred_bag = bagging_model.predict(X_test)

bagging_accuracy = sm.r2_score(Y_test, Y_pred_bag)

print()
print("Calculated Measures of Decission Tree Bagging")
print()
print("Mean absolute error =", round(sm.mean_absolute_error(Y_test, Y_pred_bag), 2)) 
print("Mean squared error =", round(sm.mean_squared_error(Y_test, Y_pred_bag), 2)) 
print("Median absolute error =", round(sm.median_absolute_error(Y_test, Y_pred_bag), 2)) 
print("Explain variance score =", round(sm.explained_variance_score(Y_test, Y_pred_bag), 2))
print()
print("Accuracy: ", bagging_accuracy)